1. Insert the following documents into a movies collection.
A:	{"title" : "Fight Club", "writer" : "Chuck Palahniuko", "year" : 1999, "actors" : [ "Brad Pitt", "Edward Norton" ]}

	{"title" : "Pulp Fiction", "writer" : "Quentin Tarantino", "year" : 1994, "actors" : [ "John Travolta", "Uma Thurman" ]}

	{"title" : "Inglorious Basterds", "writer" : "Quentin Tarantino", "year" : 2009, "actors" : [ "Brad Pitt","Diane Kruger", "Eli Roth" ]}

	{"title" : "The Hobbit: An Unexpected Journey", "writer" : "J.R.R. Tolkein", "year" : 2012, "franchise" : "The Hobbit"}

	{"title" : "The Hobbit: The Desolation of Smaug", "writer" : "J.R.R. Tolkein", "year" : 2013, "franchise" : "The Hobbit"}

	{"title" : "The Hobbit: The Battle of the Five Armies", "writer" : "J.R.R. Tolkein", "year" : 2012, "franchise" : "The Hobbit", "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."}

	{"title" : "Pee Wee Herman's Big Adventure"}

	{"title" : "Avatar"}
	
2. query the movies collection to
	1. get all documents
	A: db.movies.find().pretty()
	
	2. get all documents with writer set to "Quentin Tarantino"
	A: db.movies.find({"writer": "Quentin Tarantino"}).pretty()
	
	3. get all documents where actors include "Brad Pitt"
	A: db.movies.find({"actors":"Brad Pitt"}).pretty()
	
	4. get all documents with franchise set to "The Hobbit"
	A: db.movies.find({"franchise" : "The Hobbit"}).pretty()
	
	5. get all movies released in the 90s
	A: db.movies.find({$and: [{year:{$lt: 2000}}, {year: {$gt:1989}}]}).pretty()
	
	6. get all movies released before the year 2000 or after 2010
	A: db.movies.find({$or: [{year:{$lt: 2000}}, {year: {$gt:2010}}]}).pretty()
	
3. Update Documents
	1. add a synopsis to "The Hobbit: An Unexpected Journey" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."
	A: db.movies.update({"title":"The Hobbit: An Unexpected Journey"}, {$set: {"synopsis": "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."}})
	
	2. add a synopsis to "The Hobbit: The Desolation of Smaug" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."
	A: db.movies.update({"title":"The Hobbit: The Desolation of Smaug"}, {$set: {"synopsis": "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."}})
	
	3. add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction"
	A: db.movies.update({"title": "Pulp Fiction"}, {$set: {"actors":["Samuel L. Jackson", "John Travolta", "Uma Thurman"]}})
	
4. Text Search
	1. find all movies that have a synopsis that contains the word "Bilbo"
	A: db.movies.find({"synopsis":/Bilbo/}).pretty()
	
	2. find all movies that have a synopsis that contains the word "Gandalf"
	A:  db.movies.find({"synopsis":/Gandalf/}).pretty()
	
	3. find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf"
	A: db.movies.find({$text: {$search:"Bilbo -Gandalf"}})
		or we can also use below command
		db.movies.find({$and: [{"synopsis":{$not:/Gandalf/}},{"synopsis":/Bilbo/}]}).pretty()
	
	4. find all movies that have a synopsis that contains the word "dwarves" or "hobbit"
	A: db.movies.find({$or: [{"synopsis":/dwarves/},{"synopsis":/hobbit/}]}).pretty()
	
	5. find all movies that have a synopsis that contains the word "gold" and "dragon"
	A: db.movies.find({$and: [{"synopsis":/gold/},{"synopsis":/dragon/}]}).pretty()
	
5. Delete Documents
	1. delete the movie "Pee Wee Herman's Big Adventure"
	A: db.movies.remove({title: "Pee Wee Herman's Big Adventure"})
	
	2. delete the movie "Avatar"
	A: db.movies.remove({title: "Avatar"})
	
RELATIONSHIPS

1. Insert the following documents into a users collection
	username : GoodGuyGreg first_name : "Good Guy" last_name : "Greg" username : ScumbagSteve full_name : first : "Scumbag" last : "Steve
A: db.users.insert({"username" : "GoodGuyGreg", "first_name" : "Good Guy", "last_name" : "Greg"})
	
   db.users.insert({"username" : "ScumbagSteve", "full_name" : {"first" : "Scumbag", "last" : "Steve"}})
    
2. Insert the following documents into a posts collection
	username : GoodGuyGreg title : Passes out at party body : Wakes up early and cleans house
	username : GoodGuyGreg title : Steals your identity body : Raises your credit score
	username : GoodGuyGreg title : Reports a bug in your code body : Sends you a Pull Request
	username : ScumbagSteve title : Borrows something body : Sells it
	username : ScumbagSteve title : Borrows everything body : The end
	username : ScumbagSteve title : Forks your repo on github body : Sets to private
A: {username : "GoodGuyGreg", title : "Passes out at party", body : "Wakes up early and cleans house"}
	{username : "GoodGuyGreg", title : "Steals your identity", body : "Raises your credit score"}
	{username : "GoodGuyGreg", title : "Reports a bug in your code", body : "Sends you a Pull Request"}
	{username : "ScumbagSteve", title : "Borrows something", body : "Sells it"}
	{username : "ScumbagSteve", title : "Borrows everything", body : "The end"}
	{username : "ScumbagSteve", title : "Forks your repo on github", body : "Sets to private"}
	
3. Insert the following documents into a comments collection
	username : GoodGuyGreg comment : Hope you got a good deal! post : [post_obj_id]
	where [post_obj_id] is the ObjectId of the posts document: "Borrows something"
	username : GoodGuyGreg comment : What's mine is yours! post : [post_obj_id]
	where [post_obj_id] is the ObjectId of the posts document: "Borrows everything"
	username : GoodGuyGreg comment : Don't violate the licensing agreement! post : [post_obj_id]
	where [post_obj_id] is the ObjectId of the posts document: "Forks your repo on github
	username : ScumbagSteve comment : It still isn't clean post : [post_obj_id]
	where [post_obj_id] is the ObjectId of the posts document: "Passes out at party"
	username : ScumbagSteve comment : Denied your PR cause I found a hack post : [post_obj_id]
	where [post_obj_id] is the ObjectId of the posts document: "Reports a bug in your code"
A: db.comments.insert({username : "GoodGuyGreg", comment : "Hope you got a good deal!", post : ObjectId("5d5a91f3b67824c44c5cfc4e")})
	db.comments.insert({username : "GoodGuyGreg", comment : "What's mine is yours!", post : ObjectId("5d5a9202b67824c44c5cfc4f")})
	db.comments.insert({username : "GoodGuyGreg", comment : "Don't violate the licensing agreement!", post : ObjectId("5d5a9212b67824c44c5cfc50")})
	db.comments.insert({username : "GoodGuyGreg", comment : "It still isn't clean", post : ObjectId("5d5a91b5b67824c44c5cfc4b")})
	db.comments.insert({username : "GoodGuyGreg", comment : "Denied your PR cause I found a hack", post : ObjectId("5d5a91e1b67824c44c5cfc4d")})

	Querying related collections
	
	1. find all users
	A: db.users.find().pretty()
		
	2. find all posts
	A: db.posts.find().pretty()
	
	3. find all posts that was authored by "GoodGuyGreg"
	A: db.posts.find({username: "GoodGuyGreg"}).pretty()
	
	4. find all posts that was authored by "ScumbagSteve"
	A: db.posts.find({username: "ScumbagSteve"}).pretty()
	
	5. find all comments
	A: db.comments.find().pretty()
	
	6. find all comments that was authored by "GoodGuyGreg"
	A: db.comments.find({username: "GoodGuyGreg"}).pretty()
	
	7. find all comments that was authored by "ScumbagSteve"
	A: db.comments.find({username: "ScumbagSteve"}).pretty()
	
	8. find all comments belonging to the post "Reports a bug in your code"
	A: db.comments.find({post:ObjectId("5d5a91e1b67824c44c5cfc4d")})

	
	